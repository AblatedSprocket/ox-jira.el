#+TITLE: ox-jira
#+AUTHOR: Stig Brautaset
#+PROPERTY: header-args:emacs-lisp :tangle yes
* ox-jira - a JIRA export backend for Org mode

  I got tired of exporting Org mode to Markdown and pasting _that_ into this
  [[http://j2m.fokkezb.nl][Markdown to JIRA]] translator, so I'm attempting to write an Org to JIRA
  export backend.

  *This will most likely* only be as complete as I need it to be. I feel I tend
  to use a limited subset of Org's markup, and this backend will likely only
  support that subset---unless I get some contributions.

  The master source is in =ox-jira.org=, and the code sections are /tangled/
  (extracted) into =ox-jira.el= from it.

** Header

   First come some [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Library-Headers.html][conventional headers]] that libraries tend to include. Cask
   _requires_ them, so I assume they are a good idea.

*** Short description

    #+BEGIN_SRC emacs-lisp
      ;;; ox-jira.el --- an Org mode export backend for JIRA format
    #+END_SRC

*** Copyright & License

    I prefer the MIT license because it is short enough to read without toilet
    or tea breaks, and I _think_ I can actually wrap my head around it. (And I
    feel it's important to understand the license of your choice.)

    #+BEGIN_SRC emacs-lisp
      ;;; Copyright (C) 2016 Stig Brautaset

      ;; Permission is hereby granted, free of charge, to any person obtaining a
      ;; copy of this software and associated documentation files (the "Software"),
      ;; to deal in the Software without restriction, including without limitation
      ;; the rights to use, copy, modify, merge, publish, distribute, sublicense,
      ;; and/or sell copies of the Software, and to permit persons to whom the
      ;; Software is furnished to do so, subject to the following conditions:

      ;; The above copyright notice and this permission notice shall be included in
      ;; all copies or substantial portions of the Software.

      ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
      ;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
      ;; DEALINGS IN THE SOFTWARE.
    #+END_SRC

*** Author

    #+BEGIN_SRC emacs-lisp
      ;;; Author: Stig Brautaset <stig@brautaset.org>
    #+END_SRC

*** Keywords

    Define the keywords that can be used to find this package with
    =finder-by-keyword= (=C-h p=).

    #+BEGIN_SRC emacs-lisp
      ;; Keywords: outlines, hypermedia, wp
    #+END_SRC
*** Distribution

    #+BEGIN_SRC emacs-lisp
      ;; This file is NOT part of GNU Emacs.
    #+END_SRC
*** Version

    #+BEGIN_SRC emacs-lisp
      ;;; Version: 0.1-SNAPSHOT
    #+END_SRC

*** Homepage

    #+BEGIN_SRC emacs-lisp
      ;; Homepage: https://github.com/stig/ox-jira.el
    #+END_SRC

*** Package Requires

    We requires Org version 8 or above, as the export backend system we use
    was introduced then.

    #+BEGIN_SRC emacs-lisp
      ;; Package-Requires: ((org "8.0"))
    #+END_SRC

*** Code

    Lastly a special header to denote that we're done with the header section
    and starting the actual code now.

    #+BEGIN_SRC emacs-lisp
      ;;; Code:
    #+END_SRC

** Code

   Alright! We're done with the introduction. This section contains the actual
   code of our package. I'm excited!

*** Require libraries

   The first thing our code needs to do is require the libraries we need. This
   is cargo-culted from `ox-latex.el'.

   #+BEGIN_SRC emacs-lisp
     (eval-when-compile (require 'cl))
     (require 'ox)
     (require 'ox-publish)
   #+END_SRC

*** Define Backend

    This is the entry point of our package. The first argument is the name of
    our backend. The second is a map between "things" to export and their
    transcode functions to handle them. These are defined in the next
    section. Finally it tells the Org export backend how to create a menu
    entry for us.

    #+BEGIN_SRC emacs-lisp
      (org-export-define-backend 'jira
        '((bold . org-jira-bold)
          (headline . org-jira-headline)
          (paragraph . org-jira-paragraph)
          (section . org-jira-section))
        :menu-entry
        '(?j "Export to JIRA"
             ((?j "As JIRA buffer" org-jira-export-as-jira))))
    #+END_SRC

*** Transcode Functions

    These functions do the actual translation to JIRA format.

    #+BEGIN_SRC emacs-lisp
      ;;; Transcode functions
    #+END_SRC

**** Bold

     #+BEGIN_SRC emacs-lisp
       (defun org-jira-bold (bold contents info)
         "Transcode BOLD from Org to JIRA.
       CONTENTS is the text with bold markup. INFO is a plist holding
       contextual information."
         (format "*%s*" contents))
     #+END_SRC

**** Headline

     #+BEGIN_SRC emacs-lisp
       (defun org-jira-headline (headline contents info)
         "Transcode a HEADLINE element from Org to JIRA.
       CONTENTS is the contents of the headline, as a string.  INFO is
       the plist used as a communication channel."
         contents)
     #+END_SRC

**** Paragraph

     #+BEGIN_SRC emacs-lisp
       (defun org-jira-paragraph (paragraph contents info)
         "Transcode a PARAGRAPH element from Org to JIRA.
       CONTENTS is the contents of the paragraph, as a string.  INFO is
       the plist used as a communication channel."
         contents)
     #+END_SRC

**** Section

     Paragraphs are grouped into sections. I've not found any mention in the
     Org documentation, but it appears to be essential for any export to
     happen. I've essentially cribbed this from `ox-latex.el`[fn:1].

     #+BEGIN_SRC emacs-lisp
       (defun org-jira-section (section contents info)
         "Transcode a SECTION element from Org to JIRA.
       CONTENTS is the contents of the section, as a string.  INFO is
       the plist used as a communication channel."
         contents)
     #+END_SRC

*** End-user functions

    This is our main export function. This can be called from

    #+BEGIN_SRC emacs-lisp
      (defun org-jira-export-as-jira
          (&optional async subtreep visible-only body-only ext-plist)
        "Export current buffer as a Jira buffer.

      If narrowing is active in the current buffer, only export its
      narrowed part.

      If a region is active, export that region.

      A non-nil optional argument ASYNC means the process should happen
      asynchronously.  The resulting buffer should be accessible
      through the `org-export-stack' interface.

      When optional argument SUBTREEP is non-nil, export the sub-tree
      at point, extracting information from the headline properties
      first.

      When optional argument VISIBLE-ONLY is non-nil, don't export
      contents of hidden elements.

      When optional argument BODY-ONLY is non-nil, omit header
      stuff. (e.g. AUTHOR and TITLE.)

      EXT-PLIST, when provided, is a property list with external
      parameters overriding Org default settings, but still inferior to
      file-local settings.

      Export is done in a buffer named \"*Org JIRA Export*\", which
      will be displayed when `org-export-show-temporary-export-buffer'
      is non-nil."
        (interactive)
        (org-export-to-buffer 'jira "*Org JIRA Export*"
          async subtreep visible-only body-only ext-plist))
    #+END_SRC

*** Provide

    Announce that =ox-jira= is a feature of the current Emacs.

    #+BEGIN_SRC emacs-lisp
      (provide 'ox-jira)
    #+END_SRC

** Footer

   Now we need to put and end to this malarky. There's a magic comment for
   that too. It looks like this:

   #+BEGIN_SRC emacs-lisp
     ;;; ox-jira.el ends here
   #+END_SRC

   All that does is help people figure out if a file has been truncated. If
   they see that comment, they know they don't have just half the file.
   Weird, huh?

* Footnotes

[fn:1] Does this mean I have to use the GPL? Is a NOOP function _that you have
to implement to satisfy an interface_ subject to copyright?
